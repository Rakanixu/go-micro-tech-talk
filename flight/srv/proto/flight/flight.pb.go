// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Rakanixu/go-micro-tech-talk/flight/srv/proto/flight/flight.proto

/*
Package proto_flight is a generated protocol buffer package.

It is generated from these files:
	github.com/Rakanixu/go-micro-tech-talk/flight/srv/proto/flight/flight.proto

It has these top-level messages:
	ReadRequest
	ReadResponse
	SearchRequest
	SearchResponse
	HealthRequest
	HealthResponse
	Flight
*/
package proto_flight

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReadRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadResponse struct {
	Flight *Flight `protobuf:"bytes,1,opt,name=flight" json:"flight,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadResponse) GetFlight() *Flight {
	if m != nil {
		return m.Flight
	}
	return nil
}

type SearchRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type SearchResponse struct {
	Flights []*Flight `protobuf:"bytes,1,rep,name=flights" json:"flights,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SearchResponse) GetFlights() []*Flight {
	if m != nil {
		return m.Flights
	}
	return nil
}

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type HealthResponse struct {
	Info string `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HealthResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type Flight struct {
	Guid     string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Origin   string `protobuf:"bytes,2,opt,name=origin" json:"origin,omitempty"`
	Destiny  string `protobuf:"bytes,3,opt,name=destiny" json:"destiny,omitempty"`
	Aircraft string `protobuf:"bytes,4,opt,name=aircraft" json:"aircraft,omitempty"`
}

func (m *Flight) Reset()                    { *m = Flight{} }
func (m *Flight) String() string            { return proto.CompactTextString(m) }
func (*Flight) ProtoMessage()               {}
func (*Flight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Flight) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

func (m *Flight) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *Flight) GetDestiny() string {
	if m != nil {
		return m.Destiny
	}
	return ""
}

func (m *Flight) GetAircraft() string {
	if m != nil {
		return m.Aircraft
	}
	return ""
}

func init() {
	proto.RegisterType((*ReadRequest)(nil), "proto.flight.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "proto.flight.ReadResponse")
	proto.RegisterType((*SearchRequest)(nil), "proto.flight.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "proto.flight.SearchResponse")
	proto.RegisterType((*HealthRequest)(nil), "proto.flight.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "proto.flight.HealthResponse")
	proto.RegisterType((*Flight)(nil), "proto.flight.Flight")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Service service

type ServiceClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error)
}

type serviceClient struct {
	c           client.Client
	serviceName string
}

func NewServiceClient(serviceName string, c client.Client) ServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "proto.flight"
	}
	return &serviceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *serviceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.Health", in)
	out := new(HealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Health(context.Context, *HealthRequest, *HealthResponse) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Service{hdlr}, opts...))
}

type Service struct {
	ServiceHandler
}

func (h *Service) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.ServiceHandler.Read(ctx, in, out)
}

func (h *Service) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.ServiceHandler.Search(ctx, in, out)
}

func (h *Service) Health(ctx context.Context, in *HealthRequest, out *HealthResponse) error {
	return h.ServiceHandler.Health(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/Rakanixu/go-micro-tech-talk/flight/srv/proto/flight/flight.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x14, 0xa4, 0x80, 0x45, 0x1f, 0x1f, 0x26, 0x1b, 0x62, 0x6a, 0xd5, 0x84, 0x6c, 0x34, 0xf1, 0x20,
	0x6d, 0x82, 0x57, 0x13, 0xbd, 0x68, 0x4c, 0xbc, 0x95, 0x5f, 0xb0, 0xb4, 0x4b, 0xbb, 0x02, 0x5d,
	0xd8, 0x6e, 0x89, 0xfc, 0x53, 0x7f, 0x8e, 0x61, 0x3f, 0x48, 0x4b, 0xf0, 0xf4, 0xf6, 0xcd, 0x4c,
	0x67, 0xf2, 0xa6, 0xf0, 0x95, 0x32, 0x99, 0x95, 0xb3, 0x20, 0xe6, 0xab, 0x30, 0x22, 0x0b, 0x92,
	0xb3, 0x9f, 0x32, 0x4c, 0xf9, 0x78, 0xc5, 0x62, 0xc1, 0xc7, 0x92, 0xc6, 0xd9, 0x58, 0x92, 0xe5,
	0x22, 0x9c, 0x2f, 0x59, 0x9a, 0xc9, 0xb0, 0x10, 0xdb, 0x70, 0x2d, 0xb8, 0xe4, 0x16, 0xd0, 0x23,
	0x50, 0x18, 0xea, 0xa9, 0x11, 0x68, 0x0c, 0xdf, 0x41, 0x37, 0xa2, 0x24, 0x89, 0xe8, 0xa6, 0xa4,
	0x85, 0x44, 0x03, 0x68, 0xb2, 0xc4, 0x73, 0x46, 0xce, 0xe3, 0x45, 0xd4, 0x64, 0x09, 0x7e, 0x81,
	0x9e, 0xa6, 0x8b, 0x35, 0xcf, 0x0b, 0x8a, 0x9e, 0xc0, 0xd5, 0x1f, 0x2a, 0x4d, 0x77, 0x32, 0x0c,
	0xaa, 0x6e, 0xc1, 0x87, 0x1a, 0x91, 0xd1, 0xe0, 0x07, 0xe8, 0x4f, 0x29, 0x11, 0x71, 0x66, 0xed,
	0x87, 0x70, 0xb6, 0x29, 0xa9, 0xd8, 0x99, 0x04, 0xbd, 0xe0, 0x37, 0x18, 0x58, 0x99, 0x89, 0x09,
	0xa0, 0xa3, 0x2d, 0x0a, 0xcf, 0x19, 0xb5, 0xfe, 0xcd, 0xb1, 0x22, 0x7c, 0x09, 0xfd, 0x4f, 0x4a,
	0x96, 0xd2, 0x06, 0xe1, 0x7b, 0x18, 0x58, 0xc0, 0x58, 0x22, 0x68, 0xb3, 0x7c, 0xce, 0x4d, 0xb2,
	0x7a, 0xe3, 0x6f, 0x70, 0xb5, 0xd3, 0x9e, 0x4d, 0xcb, 0xc3, 0xe5, 0xea, 0x8d, 0xae, 0xc0, 0xe5,
	0x82, 0xa5, 0x2c, 0xf7, 0x9a, 0x0a, 0x35, 0x1b, 0xf2, 0xa0, 0x93, 0xd0, 0x42, 0xb2, 0x7c, 0xe7,
	0xb5, 0x14, 0x61, 0x57, 0xe4, 0xc3, 0x39, 0x61, 0x22, 0x16, 0x64, 0x2e, 0xbd, 0xb6, 0xa2, 0x0e,
	0xfb, 0xe4, 0xd7, 0x81, 0xce, 0x94, 0x8a, 0x2d, 0x8b, 0x29, 0x7a, 0x85, 0xf6, 0xbe, 0x55, 0x74,
	0x5d, 0xbf, 0xaa, 0xf2, 0x23, 0x7c, 0xff, 0x14, 0xa5, 0x4f, 0xc1, 0x0d, 0xf4, 0x0e, 0xae, 0x6e,
	0x0c, 0xdd, 0xd4, 0x75, 0xb5, 0xba, 0xfd, 0xdb, 0xd3, 0x64, 0xd5, 0x46, 0xb7, 0x74, 0x6c, 0x53,
	0x2b, 0xf3, 0xd8, 0xa6, 0x5e, 0x2c, 0x6e, 0xcc, 0x5c, 0x45, 0x3f, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xbb, 0xf4, 0xb5, 0x96, 0xa7, 0x02, 0x00, 0x00,
}
